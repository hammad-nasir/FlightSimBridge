<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFUzHgBRMR4EWzUdKVIwHGxPLhusTS0a2Uws
        GfJLKxj9SioX/UgpFvJIKBXZSCgUrEkoFGxIJxMpPSISBEIkEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHpFIwB/SCQDcUEhNmk8H5dhOB3fWDMc+1Mw
        G/9RLxr/VDAZ/1UvGP9QLRf/Ui4X/1EsFv9LKhX/SikU+0wpFN9WLhSXVC0UNkAjEgNJJxIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKlgKwCJTiUAklMnGohOJYmFSyPqhUoh/4FH
        IP94Qh7/aToc/2I2G/9fNBr/WDEZ/1UvGP9VLxj/VC4X/1UvF/9VLxb/VS4V/1MtFf9MKRTqSigTiUsp
        FBpMKRMARSYTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2RykAf0woAHdHKTV7SSjCdkYm/nlG
        JP96RSL/cUAg/2k7Hv9qOx3/cz8d/3dAHf9rOhv/YDUa/2Q3Gv9mOBr/aTkZ/2M2GP9XMBb/USwW/08s
        Ff9RLBX+UiwUwlYuFDVGJhQAXzIVAAAAAAAAAAAAAAAAAAAAAAAAAAAAdEktAHVDIwB2SCtCdEYp2XBD
        KP9tQif/bUEl/29AI/9oOyD/Yjge/2I3Hv9oOh7/dkEe/3lCHv9qOhz/ZTgc/2A1G/9dNBr/WzIZ/1gx
        GP9YMBj/Vy8X/1YvFv9VLhX/Vi4V2VQtFEJfMhUATioUAAAAAAAAAAAAAAAAAH1PMQB6TjIAek0wNn1W
        PdmBXkj/eFA3/3VLMf9yRyz/bUAk/2w+If9rPSD/bD0g/28/IP99RSH/ekQg/2w9Hv9oOx7/Zzod/2o6
        HP9nORv/YDUa/180Gf9hNBj/XzMY/10yFv9hMxb/XzIW2VguFTZaLxYAUSsUAAAAAAAAAAAAhFQ1AINS
        MhqFWj7CnIh7/7i3t/+pnJP/n4h7/5d8bP94Ryf/eEQj/3lEIv9/SCP/fkcj/3pFI/9zQiL/cUAh/3E/
        IP9wPx//bj4e/3E+Hf9yPhz/dD4b/3tBG/9wPBr/ajgZ/3M9Gf9vOhj/XTEWwlowFhpbMBYAAAAAAJth
        NgCpajgCllwyiaB4XP+9ubX/x8rL/7OaiP+tinL/qYt4/4ZQLf+DSiX/g0sm/4BJJv99SCb/e0cl/3tG
        JP98RiT/fEYj/3hDIv95RCH/ekMf/3E+Hf9sOxz/bjwc/288HP9sOxv/dT8b/3U+G/9oOBn/YzUYiWA1
        GgJiNRkAlmA5AJZgOTeaYjjpm2Y//6B4Xf+jgWn/rpeI/7ispP+tlYb/kl89/4pPKP+KUSr/iVAr/4hP
        Kf+JTyn/hU0n/4RLJ/+BSiX/f0gj/4JJIv+GSiH/h0oh/4RIIP+BRx//f0Yf/3A9Hv9pOhz/aDkb/2g5
        G/9oOBvpaTkbN2g4GwChaj0CmmQ7lplkPf+bakT/nXBQ/5ZiPf+XZUH/mWpJ/5ViP/+NVC7/i1Mt/41V
        MP+OVS//jlQt/49ULP+PUyr/kFMp/5RUJ/+PUSX/mFUl/5hVJf+UUyT/k1Ej/5NRIv+OTiH/gEYg/3VA
        Hv9yPh3/dkAd/3hBHf9zPhyWfkIcAqh0SimjbkTeom5E/6JvRv+hbET/n2tD/51oQP+ZYTj/l1wy/5dd
        Nf+VXDT/lVw0/5VbMv+SWDD/klYt/5NVKv+XVij/nloo/5hWJ/+RUyf/iU4m/4VMJv+ESyT/iEwj/4lM
        Iv+ESCH/g0cg/35FH/9+RR//fkQf/3lCHt55Qh4pv5NqbL2ae/u6l3r/sYJZ/6l2TP+nckf/pW5D/6Fn
        Ov+jZzr/oG9I/59nPP+kZzr/oGEy/55dLv+fXS3/mVkr/5dXKv+WVir/kVMq/49SKf+NUSj/i08n/45Q
        Jv+PUCX/ik0k/4dLI/+GSyP/hEkj/4ZKIv+ISiH/gUcg+39GIGzOwbOsy7us/8Syov/ArJr/vaiX/7SP
        cf+ve1D/rHBA/6BoNv96Vy3/pHNK/7iIYf+wgV3/pnJM/51iOP+ZWi7/mVot/4hRKv9wQiD/dEQi/4hO
        J/+SUyj/lFQo/5VVKP+QUSf/jVAm/45QJv+NTyb/jE4k/41PJP+QUCT/kE8jrMiwmtnSzcf/0tPS/87O
        zf/U1NT/yb2x/7KEW/+gajz/eVAp/3pQK/+IVy//iFgw/5FjPv+ge17/q5SB/7OWgf+eeFz/cVU7/3FZ
        Kv9fQhf/d0gl/5pZLP+cWiv/nlsr/55bK/+dWir/oFsq/55aKf+bWCj/nVko/55ZJ/+XVSbZxZho8syw
        k//Rv6z/y76w/6uhlP9zY0v/XEAg/1Q6Hf9LNRX/TzgZ/085F/9POxj/TzoX/086F/9dTjD/hHxq/5SM
        gP+RhXb/hnla/1xIHv9TNxf/aEAc/3FEH/92RyD/ekgh/4ROJP+LUST/iU8k/39KIf+RUyX/nFkq/5hX
        KfLKpHz9ypxo/8eaZ/+hiF3/aFc4/0MuEf9CKgz/YVQh/4uHU/+lln//pZB6/6CIcP+bgWf/l3xg/5F3
        WP+IcE7/g21O/4BoS/94XT//ZUws/1pDIf9YRB7/TjsY/047Fv9JNhT/QywP/0QrEP9CKg//OyUL/08w
        Ef+DTST/n10t/dXDsf3SsIv/z6Nw/4x2Pv9gVSP/YUkk/0sxEv9oWyv/qp9z/9nIr//gzLb/4My1/+DM
        t//ezLv/3Mu7/9jJuv/Txbn/z8C0/8q5q//DsKL/vaeX/56Hdf+Aalb/eWNP/4BpVP94XUj/hWRL/3xY
        O/9tRyn/TzIW/188GP+bXy392MOs8trNvv/HtJr/b2Qz/2ZTJv+HaEz/sKSY/8rCuf/Svqn/1LaU/9Ox
        jf/Rpnb/z51n/82fbf/Qo3P/0qd5/9Omdf/Vqnv/2K6D/9u5lf/l2cv/17+m/9K4nP/Ru6T/076q/9K/
        rP/UvKb/yaiN/7SIZP+iazv/s3Q7/7l3PvLLs5zZxqWI/5t/WP9eUyH/cVsz/8KzpP/h39z/3c+//9my
        g//XqG7/1qZr/9ayiP/XxK//0r6p/9O2l//VuZv/0aFr/8+WWP/OlVf/zpNT/8alc//Km2b/zpRV/86U
        Vv/Ok1X/zpNW/82SVf/Lj1L/yotN/8iHSf/Fhkr/xINH2dO+q6zIr5n/dFxD/29YMv/DsJj/4tPE/+DU
        x//exKX/3LeH/9uzgf/bs4H/2rGA/9u4jf/btYb/2beP/9e3k//XvJ7/1LOS/9e3lv/Proj/sJlv/8yq
        hP/OpHr/0K2K/8+icv/Rml3/0ZdX/9CVVf/PlFP/zpZZ/86idf/Mm2qs6dvMbNbHufuFaVL/waqU/+bX
        xv/k2Mr/49nO/+DSw//h0L7/4tC+/+DRwv/fy7f/38u3/97Fqf/fzr//3ciy/93IsP/dw6X/3bmQ/9m8
        nP/Xw67/28y//9S/rP/Zx7f/2bqY/9ixhf/Vp3H/1aRt/9Wjaf/Uo2r/1KFm+9OgZmzp18Yp5tnN3t7L
        uP/n1L//6NS+/+fVwf/n18j/5tnN/+XVxf/m18f/5tnM/+TXzP/k2M7/49PG/+PXzf/i1Mj/3saw/93C
        p//exaz/38Ws/93CqP/ex6//38q1/9/Fqv/ev5z/3b+f/9vAp//avaH/2ruc/9i1kf/Ys4ze1qt8Kerk
        4ALs4NSW7N3O/+zf0f/r3tH/697S/+vd0P/q2sr/693P/+vby//q2cn/6dfG/+nay//p2cn/6dfG/+nZ
        yv/o2Mr/59bG/+bSwP/m0b7/5tPA/+XQvP/lz7v/5NHA/+TOu//jzLf/4sy4/+HKtf/gyLL/4MKk/9/D
        pZbPvrEC7dzKAO3dyzft28Xp7drD/+3bxf/t3Mj/7drF/+3axP/s2sb/7dnB/+zax//r2sr/7NnH/+vY
        xP/s1r3/69S7/+vTuf/q07j/6tK4/+nSuv/p0rv/6dK7/+jRuv/n0bv/5s+6/+bOt//mzbX/5cux/+TI
        rP/jx6rp4sesN+LHrgDt1rgA7+XdAu3PpYnszJ//7Myf/+zMof/rzqn/7M6o/+zLoP/syZr/68qc/+vL
        n//ryp7/6sia/+rHl//qx5j/6seY/+rHmf/pxpf/6cWV/+jElP/ow5D/6MKP/+fBjv/mwI3/5r+L/+W+
        if/kvYf/47uE/+O8iInkzrwC48OcAAAAAADpwYgA6sKJGui9f8Lnu3v/5rt7/+a7f//mvIL/5ryD/+a7
        f//luHb/5bd1/+W3dP/ltnP/5LZz/+S1dP/ktnX/5LV1/+O0cf/jsm3/4rJs/+Kxa//isGr/4a9p/+Cv
        aP/grmf/361l/96rZP/erGXC4LFtGuCwbAAAAAAAAAAAAOGvZQDhrmUA4rBoNuCrYdnfqmH/36ph/96o
        YP/eqF7/3qdb/96mWv/dpVn/3aVY/92kV//co1b/3KJV/9yiVP/boVP/26BS/9qfUv/anlH/2Z5R/9md
        UP/YnE//2JtO/9eaTf/WmUz/1plN2dieUTbXnE8A2JxLAAAAAAAAAAAAAAAAANuhUwDVk0kA2p5RQteY
        TNnWlkr/1ZVJ/9WUSP/VlEf/1JNH/9SSRv/UkUb/05BF/9OPRP/SjkP/0o5D/9GNQv/RjEH/0ItB/9CK
        QP/Pij//z4k//86IPv/Nhz7/zIU9/8yGPdnPi0BCyoI7ANCNQQAAAAAAAAAAAAAAAAAAAAAAAAAAANGO
        QgDMgz4A0IxCNc6HP8LMgz3+y4I8/8uCO//KgTr/yoA6/8l/Of/Jfjn/yH04/8d8N//Hezf/xno2/8Z5
        Nv/FeDX/xHg0/8N3NP/DdjP/wnUz/8F0Mv7CdTPCxXk1NcByMwDGejQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMV3NQDGezcAx3w4GsR3NYnBczPqwHEy/79wMf++bzH/vm8w/71uL/+8bS//vGwu/7tr
        Lv+6ai3/uWks/7loLP+4Zyv/tmcr/7ZlKv+2ZSrqt2gribprLRq6ay0AtmUpAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC8bC8AvWwvA7pqLja3ZiyXtGMq37NiKfuyYSj/sWAo/7Bf
        J/+wXif/r10m/65cJv+tWyX/rFok/6tZJPurWiTfrFsll65dJTauXSYDrl0mAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAr10nAK5cJgSuXCcprFolbKpY
        JKyoViPZp1Qi8qVTIv2kUiH9pFEh8qNRINmkUSCspFIgbKVTISmkUSAEpVIhAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/+AAAH/AAAA/gAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>